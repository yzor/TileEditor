"use strict";
//–°–ª–æ–π –¥–ª—è —Ç–∞–π–ª–æ–≤
// var layerTiles = new Konva.FastLayer({
var layerTiles = new Konva.Layer({
    // grabX = Math.floor(grabX);
    // var holstW = 10; //—à–∏—Ä–∏–Ω–∞ –≤ –∫–ª–µ—Ç–∫–∞—Ö
    //var holstH = 30; //–≤—ã—Å–æ—Ç–∞ –≤ –∫–ª–µ—Ç–∫–∞—Ö
    //var boxSize = 10; //—Ä–∞–∑–º–µ—Ä –∫–ª–µ—Ç–∫–∏
    // x: qwe2x,
    // y: qwe2y,
    // draggable: true,
    dragBoundFunc: function (pos) {
        // console.log(pos);

        // layerNum.x(pos.x); //–¢–∞–∫–∂–µ –ø–µ—Ä–µ–º–µ—â–∞—Ç—å –Ω—É–º–µ—Ä–∞—Ü–∏—é
        // layerNum.y(pos.y);
        // layerRap.x(pos.x); //–¢–∞–∫–∂–µ –ø–µ—Ä–µ–º–µ—â–∞—Ç—å –Ω—É–º–µ—Ä–∞—Ü–∏—é
        // layerRap.y(pos.y); #TODO —Å—Ä–∞–≤–Ω–∏—Ç—å –µ—Å—Ç—å –ª–∏ –≤—ã–π–≥—Ä—ã—à –≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        layerNum.position(pos);
        layerRap.position(pos);

        // layerNum.batchDraw();
        // layerRap.batchDraw();
        // layerNum.batchDraw();
        layerRap.draw();
        layerNum.draw();
        return {
            x: pos.x,
            y: pos.y
            // y: this.getAbsolutePosition().y
        }
    }
    // opacity: 0.1
});


/////////////////////////////
// generate boxes
//for (var ix = 0; ix < width / BOX_SIZE; ix++) {// noprotect
//for (var iy = 0; iy < height / BOX_SIZE; iy++) {// noprotect
//  for (var iy = 0; iy < height / BOX_SIZE; iy++) {// noprotect
//        for (var ix = 0; ix < width / BOX_SIZE; ix++) {// noprotect
var box;
var BD1 = [];

function gridTiles() {
    layerTiles.destroyChildren(); //–æ—á–∏—Å—Ç–∏—Ç—å —Å–ª–æ–π
    //—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ö–µ–º—ã –µ—Å–ª–∏ —É–º–µ—â–∞–µ—Ç—Å—è –Ω–∞ —ç–∫—Ä–∞–Ω
    //–ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª –µ—Å–ª–∏ –Ω–µ —É–º–µ—â–∞–µ—Ç—Å—è
    if (widthScreen < ((holstW + 2) * boxSize)) { //–µ—Å–ª–∏ —à–∏—Ä–∏–Ω–∞ "–∫–∞–Ω–≤—ã" –º–µ–Ω—å—à–µ —Å—Ö–µ–º—ã —É—á–∏—Ç—ã–≤–∞—è –Ω—É–º–µ—Ä–∞—Ü–∏–∏...
        layerTiles.x(Math.floor(widthScreen - ((holstW + 1) * (boxSize)) - 4)); //-4 ‚Üí –ø—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å | +1 ‚Üí –Ω—É–º–µ—Ä–∞—Ü–∏—è
    } else {
        layerTiles.x(Math.floor((widthScreen - (holstW * boxSize)) / 2));
    }
    if (heightScreen < (((holstH + 2) * boxSize) + 100)) { //–µ—Å–ª–∏ –≤—ã—Å–æ—Ç–∞ "–∫–∞–Ω–≤—ã" –º–µ–Ω—å—à–µ —Å—Ö–µ–º—ã —É—á–∏—Ç—ã–≤–∞—è –Ω—É–º–µ—Ä–∞—Ü–∏–∏... (100 ‚Üí +50–ø–∞–Ω–µ–ª—å —Å–∏–º–≤–æ–ª–æ–≤*2)
        layerTiles.y(Math.floor(heightScreen - ((holstH + 1) * (boxSize)) - 50)); //-50 ‚Üí –ø–∞–Ω–µ–ª—å —Å–∏–º–≤–æ–ª–æ–≤ | +1 ‚Üí –Ω—É–º–µ—Ä–∞—Ü–∏—è
    } else {
        layerTiles.y(Math.floor((heightScreen - (holstH * boxSize)) / 2));
    }


    var groupGrid = new Konva.Group({ //–≥—Ä—É–ø–ø–∞ —Å —Å–µ—Ç–∫–æ–π —Ç–∞–π–ª–æ–≤
        // x: 16,
        // y: 13,
        // draggable: true
    });
    //—Å–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ —Ç–µ–∫—É—â–µ–π —Å—Ö–µ–º—ã
    for (var i = 0, l = holstH; i < l; i++) {
        var arr = [];
        for (var iW = 0, lW = holstW; iW < lW; iW++) {
            arr[iW] = [];
        }
        BD1[i] = arr;
    }
    for (var iy = 0; iy < holstH; iy++) { // noprotect
        for (var ix = 0; ix < holstW; ix++) { // noprotect
            box = new Konva.Rect({
                //https://yzorrykodelie.ru/%F0%9F%8C%90/%D0%BB%D0%B8%D1%86%D0%B5%D0%B2%D0%B0%D1%8F.png
                //https://yzorrykodelie.ru/üåê/–ª–∏—Ü–µ–≤–∞—è.png
                x: ix * boxSize,
                y: iy * boxSize,
                width: boxSize,
                height: boxSize,

                // x : ix * boxSize,
                // y : iy * boxSize,
                // width : boxSize - 1,
                // height : boxSize - 1,
                // fill : 'darkgrey',
                stroke: 'gold',
                // scaleX:1.1,
                // scaleY:1.1,
                strokeWidth: 1
            });
            groupGrid.add(box);
        }
    }
    layerTiles.add(groupGrid);
    layerTiles.draw();
    // as all boxes stay separately with no overlap
    // and they have no opacity
    // we can call 'box.draw()' and we will have expected result
    // REMEMBER that is this case box will be drawn on top of existing layer
    // without clearing
}

//–Ω—É–º–µ—Ä–∞—Ü–∏—è
var layerNum = new Konva.Layer({
    // x: 65,
    // y: 15,
    // x: Math.floor(widthScreen / 2 - (holstW * boxSize) / 2),
    // y: Math.floor(heightScreen / 2 - (holstH * boxSize) / 2),
    // x: layerTiles.x(),
    // y: layerTiles.y(),
    // draggable: true,
    // dragBoundFunc: function (pos) {
    //   // console.log(pos);
    //   layerTiles.x(pos.x);
    //   layerTiles.y(pos.y);
    //   // layerTiles.draw();
    //   layerTiles.batchDraw();

    //   return {
    //     x: pos.x,
    //     y: pos.y
    //     // y: this.getAbsolutePosition().y
    //   }
    // }
});

function schemeNumbering() {
    layerNum.clearCache();
    layerNum.destroyChildren(); //–æ—á–∏—Å—Ç–∏—Ç—å —Å–ª–æ–π
    layerNum.x(layerTiles.x()); //–ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Å–ª–æ–π
    layerNum.y(layerTiles.y()); //–∫ —Å–ª–æ—é —Ç–∞–π–ª–æ–≤

    var txtPad = boxSize / 5; //–æ—Ç—Å—Ç—É–ø —Ç–µ–∫—Å—Ç–∞
    var txtSize = boxSize - txtPad * 2; //—Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞
    var txtGroup = new Konva.Group({ //–≥—Ä—É–ø–ø–∞ –¥–ª—è –±–ª–æ–∫–∞ –Ω—É–º–µ—Ä–∞—Ü–∏–∏
        // x: boxSize * holstH,
        // x: -boxSize,
        // y: i * (boxSize + 0)
    });
    var txtTxt = new Konva.Text({ //–¢–µ–∫—Å—Ç
        text: "?",
        // text: i2  * 11 - 2  ,
        // text: i2,
        fontSize: txtSize,
        padding: txtPad,
        fill: 'gold', //—Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
        /*
              x: 0,
              y: 0,
              align: 'right', //can be left, center, or right
              width: boxSize * 2,
              fontFamily: 'Calibri',
              width: 300,
              fontSize: 50,
              padding: 10,
              fontSize: 18,
              lineHeight: 1
              stroke: "white",
              strokeWidth: 6,
              dash: [0.4, 4] */
    });
    var txtBox = new Konva.Rect({ //–ø–æ–¥–ª–æ–∂–∫–∞(–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        width: boxSize,
        height: boxSize,
        // fill: 'darkgrey',
        // fill:"gold",
        // fill:"#141414 ",
        fill: "#1F1F1F",
        cornerRadius: boxSize / 4,
        // cornerRadius: boxSize   ,

        // stroke: 'white',
        stroke: 'gold',
        // stroke: 'black',

        strokeWidth: 2,
        offsetY: boxSize / 2, //—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ –≤—ã—Å–æ—Ç–µ
        offsetX: boxSize / 2,
        y: boxSize / 2, //—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ –≤—ã—Å–æ—Ç–µ
        x: boxSize / 2,
        scale: {
            x: 0.9,
            y: 0.9
        },
        opacity: 0
    });
    txtGroup.on('mouseover', function () { //–Ω–∞–≤–µ–¥–µ–Ω–∏–µ –Ω–∞ —Å–∏–º–≤–æ–ª
        var box = this.children[0];
        var txt = this.children[1];
        // box.fill("white");
        // path.fill("rgba(225, 225, 225, 0.9)");
        box.opacity(1);
        layerNum.batchDraw();
    });
    txtGroup.on('mouseout', function () {
        var box = this.children[0];
        var txt = this.children[1];

        // box.fill("rgba(225, 225, 225, 0.3)");
        // box.fill("gold");
        box.opacity(0);
        layerNum.batchDraw();
    });
    txtGroup.add(txtBox, txtTxt);




    // console.log('%c%s', 'background: gold; color:black;', " ", holstH, "—à—Ç—É–∫ \n", boxSize, "—Ä–∞–∑–º–µ—Ä \n", holstW, "—à–∏—Ä–∏–Ω–∞ —Å—Ö–µ–º—ã \n", boxSize, "—à—Ç—É–∫ \n", boxSize, "—à—Ç—É–∫ \n", boxSize, "—à—Ç—É–∫ \n"); //test

    var lineNumberingL = new Konva.Group({ // ‚Üê –ª–µ–≤–∞—è —à–∫–∞–ª–∞
        x: -boxSize
    });
    var lineNumberingR = new Konva.Group({ // ‚Üí –ø—Ä–∞–≤–∞—è —à–∫–∞–ª–∞
        x: boxSize * holstW
    });
    var lineNumberingT = new Konva.Group({ // ‚Üë –≤–µ—Ä—Ö–Ω—è—è —à–∫–∞–ª–∞
        y: -boxSize
    });
    var lineNumberingB = new Konva.Group({ // ‚Üì –Ω–∏–∂–Ω—è—è —à–∫–∞–ª–∞
        y: boxSize * holstH
    });

    var numType = TE.scheme.num;
    var numXType = TE.scheme.numX;


    //–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —É—á–∏—Ç—ã–≤–∞—è –Ω—É–º–µ—Ä–∞—Ü–∏—é
    function txtNum(n, RL) {
        // n=n*11;
        if (numType == 0) { //—Ä–µ–≤–µ—Ä—Å
            n++;
        } else {
            n = holstH - n; //—Ä–µ–≤–µ—Ä—Å –Ω—É–º–µ—Ä–∞—Ü–∏–∏
        }

        if (numType == 0) {

        } else if (numType == 1) { //1 3 5
            if (n % 2 == 0) { //—á—ë—Ç–Ω–æ–µ  —á–∏—Å–ª–æ
                if (RL == "R") n = "";
            } else { //–ù–µ—á—ë—Ç–Ω–æ–µ
                if (RL == "L") n = "";
            }
        } else if (numType == 2) { //135
            n = n * 2 - 1; //135
            // if (RL == "R") n = "";
            if (RL == "L") n = ""; //–æ—Ç–∫–ª –ª–µ–≤—É—é –∫–æ–ª–æ–Ω–∫—É
        } else if (numType == 3) { //123
            if (RL == "L") n = ""; //–æ—Ç–∫–ª –ª–µ–≤—É—é –∫–æ–ª–æ–Ω–∫—É
        }


        return n;
    }

    //–¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ –∫–ª–µ—Ç–∫–µ
    function txtCentering(elem) {
        if (elem.width() > boxSize) { //–µ—Å–ª–∏ —à–∏—Ä–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ - –±–æ–ª—å—à–µ –∫–ª–µ—Ç–∫–∏, —Ç–æ —Å–∫—É–∫–æ–∂–∏–≤–∞–µ–º
            elem.setAttrs({
                offsetY: boxSize / 2, //—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ –≤—ã—Å–æ—Ç–µ
                y: boxSize / 2, //—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ –≤—ã—Å–æ—Ç–µ
                scale: { //–º–∞—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª–∏–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —É–º–µ—â–µ–Ω–∏—è –≤ –∫–ª–µ—Ç–∫—É
                    x: boxSize / elem.width(),
                    y: boxSize / elem.width()
                }
            });
        } else { //–µ—Å–ª–∏ —à–∏—Ä–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ - –º–µ–Ω—å—à–µ –∫–ª–µ—Ç–∫–∏, —Ç–æ —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º
            elem.setAttrs({
                align: 'center',
                width: boxSize //—É–∫–∞–∑—ã–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —è–≤–Ω–æ –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
            });
        }
    }

    //–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –Ω—É–º–µ—Ä–∞—Ü–∏—è
    for (var i = 0, l = holstH; i < l; i++) {

        //–±–æ–∫—Å —Ü–∏—Ñ—Ä—ã
        var elem = txtGroup.clone({
            y: i * boxSize //—Å–º–µ—â–µ–Ω–∏–µ –Ω–∞ —Ä–∞–∑–º–µ—Ä —Ä–∞–≤–Ω—ã–π –æ–¥–Ω–æ–π –∫–ª–µ—Ç–∫–µ
        });

        //–ª–µ–≤–∞—è –Ω—É–º–µ—Ä–∞—Ü–∏—è
        var elem2 = elem.clone();
        var txt2 = elem2.children[1];
        txt2.text(txtNum(i, "L"));
        txtCentering(txt2);
        lineNumberingL.add(elem2);

        //–ø—Ä–∞–≤–∞—è –Ω—É–º–µ—Ä–∞—Ü–∏—è
        var txt1 = elem.children[1]; //—Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ª–æ–π
        txt1.text(txtNum(i, "R"));
        txtCentering(txt1);
        lineNumberingR.add(elem);
    }

    //–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –Ω—É–º–µ—Ä–∞—Ü–∏—è
    for (var i = 0, l = holstW; i < l; i++) {

        //–±–æ–∫—Å —Ü–∏—Ñ—Ä—ã
        var elem = txtGroup.clone({
            x: i * boxSize //—Å–º–µ—â–µ–Ω–∏–µ –Ω–∞ —Ä–∞–∑–º–µ—Ä —Ä–∞–≤–Ω—ã–π –æ–¥–Ω–æ–π –∫–ª–µ—Ç–∫–µ
        });
        var n;

        if (numXType == 0) {
            n = "";
        } else if (numXType == 1) {
            n = holstW - i;
        } else if (numXType == 2) {
            n = i + 1;
        }


        // console.warn(i2);

        var txt1 = elem.children[1]; //—Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ª–æ–π
        // txt1.text(txtNum(i, "R"));
        txt1.text(n);
        txtCentering(txt1);
        lineNumberingT.add(elem);
        lineNumberingB.add(elem.clone());
    }



    // layerTiles.add(lineNumberingT, lineNumberingB);
    // layerTiles.add(lineNumberingR, lineNumberingL);
    // layerTiles.draw();
    layerNum.add(lineNumberingT, lineNumberingB);
    layerNum.add(lineNumberingR, lineNumberingL);
    layerNum.draw();
}

//—Ä–∞–ø–ø–æ—Ä—Ç
var layerRap = new Konva.Layer();

function schemeRap() {
    $("body").removeClass("rap"); //—É–¥–∞–ª–∏—Ç—å –∫–ª–∞—Å—Å —Ä–∞–ø–ø–æ—Ä—Ç–∞, –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    layerRap.destroyChildren(); //–æ—á–∏—Å—Ç–∏—Ç—å —Å–ª–æ–π
    layerRap.x(layerTiles.x()); //–ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Å–ª–æ–π
    layerRap.y(layerTiles.y()); //–∫ —Å–ª–æ—é —Ç–∞–π–ª–æ–≤
    var colorRap = "gold";
    var colorRapA = "black";

    var x, y, w, h;
    if (TE.scheme.rap) { //–µ—Å–ª–∏ —Ä–∞–ø–ø–æ—Ä—Ç –µ—Å—Ç—å
        var r = TE.scheme.rap;
        x = r.x;
        y = r.y;
        w = r.w;
        h = r.h;
    } else { //–∏–Ω–∞—á–µ —Ä–∏—Å—É–µ–º –≤–æ –≤—Å—é —Å—Ö–µ–º—É
        x = 0;
        y = 0;
        w = holstW * boxSize;
        h = holstH * boxSize;
    }
    var lineRap = new Konva.Line({
        points: [
            x, y,
            x + w, y,
            x + w, y + h,
            x, y + h,
            // x, y, // –ø–æ—Å–ª–µ–¥–Ω—è—è —Ç–æ—á–∫–∞ –∫–∞–∫ –ø–µ—Ä–≤–∞—è, —Ç.–∫. –∑–∞–∫—Ä—ã—Ç—å –Ω–µ–ª—å–∑—è
        ],
        stroke: colorRap,
        strokeWidth: 4,
        lineJoin: 'round', //—É–≥–ª—ã
        closed: true, // –µ—Å–ª–∏ –∑–∞–∫—Ä—ã–≤–∞—Ç—å, —Ç–æ —Å—Ç–∞–≤–∏—Ç—å fillEnabled:false
        fillEnabled: false, //–æ—Ç–∫–ª—é—á–∏—Ç—å –∑–∞–ª–∏–≤–∫—É –¥–∞–±—ã  –Ω–µ –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—Ç—å —Ç–∞–π–ª—ã
        // tension:   0.102 ,//–∏—Å–∫–∞–∂–µ–Ω–∏–µ –ª–∏–Ω–∏–∏
        strokeHitEnabled: false, //–µ—Å–ª–∏ false —Ç–æ –∫–ª–∏–∫–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç —Å–∫–≤–æ–∑—å —Ä–∞–ø–ø–æ—Ä—Ç
        // draggable: true,
        // opacity:0.7,








        // dash: [boxSize / 10 * 2, boxSize / 10 * 6, boxSize / 10 * 2, 0],
        //—É–≥–ª—ã
        lineJoin: 'bevel', //—Å–∫–æ—Å
        lineJoin: 'miter', //–∫–≤–∞–¥—Ä–∞—Ç
        lineJoin: 'round', //—Å–∫—Ä—É–≥–ª


        //–∫–æ–Ω—Ü—ã
        lineCap: 'sqare', //
        lineCap: 'butt', //–ø—Ä—è–º–æ–π
        lineCap: 'round', //—Å–∫—Ä—É–≥–ª
        //	String<optional> can be butt, round, or sqare.The default is butt

        // shadowColor:"blue",
        // shadowBlur:0,
        // shadowOffsetX:100,

        /*
            –∫–æ–ª–±–∞—Å–∫–∏
            dash: [boxSize / 10 * 2, boxSize / 10 * 6,boxSize / 10 * 2,0 ],
            —Ç–æ—á–∫–∏ –Ω–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è—Ö, –∏ –∫–æ–ª–±–∞—Å–∫–∏ –≤ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞—Ö
            dash: [0, boxSize / 10 * 3, boxSize / 10 * 4, boxSize / 10 * 3 ],
            lineCap: 'round',//—Å–∫—Ä—É–≥–ª
            strokeWidth: boxSize/5  ,

            —Ä–∞–ø–ø–æ—Ä—Ç –≤ 4 —Ç–æ—á–∫–∏
            dash: [0, boxSize/4],
            lineCap: 'round',//—Å–∫—Ä—É–≥–ª
            strokeWidth: boxSize/5  ,

            —Ä–∞–ø–ø–æ—Ä—Ç —Ç–æ—á–∫–∞–º–∏ –≤ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è—Ö
            dash: [0, boxSize],
            lineCap: 'round',
            strokeWidth: 10, */

        // perfectDrawEnabled:false,
        // lineCap: 'round', //–∫–æ–Ω—Ü—ã
        // fill:"green",
    });


    // lineRap.closed(false);
    // console.error("‚ô¶", lineRap.points());
    // lineRap.points([0, 0, 100, 0, 100, 100, 0, 100]);
    // console.error("‚ô¶", lineRap.points());
    var radius = boxSize / 7;
    if (radius < 6) {
        radius = 6;
    }
    if (radius > 9) {
        radius = 9;
    }
    var circleRapEdit = new Konva.Circle({ //—Ç–æ—á–∫–∞ –∫–Ω–æ–ø–∫–∞ –Ω–∞ —Ä–∞–ø–ø–æ—Ä—Ç–µ
        name: "cr", // Circle Rap
        x: x + w,
        y: y,
        radius: radius,
        fill: colorRap,
        stroke: colorRapA,
        strokeWidth: 5,
        strokeWidth: 1.5,
        // opacity:0.3
    });
    // add hover styling
    circleRapEdit.on('mouseover', function () {
        var layer = this.getLayer();
        document.body.style.cursor = 'pointer';
        this.radius(circleRapEdit.radius() + 2);
        // this.setStrokeWidth(circleRapEdit.radius()*2);
        layer.draw();
    });
    circleRapEdit.on('mouseout', function () {
        var layer = this.getLayer();
        document.body.style.cursor = 'default';
        // this.setStrokeWidth(2);
        this.radius(circleRapEdit.radius() - 2);
        // layer.draw();
        layerRap.draw();
    });

    circleRapEdit.on('mousedown touchstart', function () {
        rapResize();
    });




    layerRap.add(lineRap, circleRapEdit);
    layerRap.batchDraw();
}

function rapResize() {
    $("body").addClass("rap"); //–¥–æ–±–∞–≤–∏—Ç—å –∫–ª–∞—Å—Å –≤ —Ç–µ–ª–æ
    // layerTiles.cache();//–∑–∞–∫–µ—à–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ–π —Ç–∞–π–ª–æ–≤
    layerTiles.draggable(true);//–≤–∫–ª—é—á–∏—Ç—å –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ
    layerRap.get('.rr').destroy(); //—É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—É—é –≥—Ä—É–ø–ø—É —Ä–µ—Å–∞–π–∑–∞ - –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –æ—Å—Ç–∞–ª–∞—Å—å
    layerRap.get('.cr').hide(); //—Å–∫—Ä—ã—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∞ —Ä–∞–ø–ø–æ—Ä—Ç–µ
    layerRap.getChildren()[0].stroke("#2196f3"); //–∏–∑–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç —Ä–∞–ø–ø–æ—Ä—Ç–∞
    TE.selected.oldTool = TE.selected.tools; //—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –≤–µ—Ä–Ω—É—Ç—å
    TE.selected.tools = "rap"; //–∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
    let rapResizeGroup = new Konva.Group({
        name: "rr" //Rap Resize
        // draggable: true
    });
    let x, y, h, w;//–ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞–ø–ø–æ—Ä—Ç–∞
    if (TE.scheme.rap) {//–ï—Å–ª–∏ —Ä–∞–ø–ø–æ—Ä—Ç –µ—Å—Ç—å
        let r = TE.scheme.rap;
        x = r.x;
        y = r.y;
        w = r.w;
        h = r.h;
    } else {//–∏–Ω–∞—á–µ –≤–æ –≤—Å—é —Å—Ö–µ–º—É
        x = 0;
        y = 0;
        w = holstW * boxSize;
        h = holstH * boxSize;
    }
    addAnchor(rapResizeGroup, x, y, 'topLeft');
    addAnchor(rapResizeGroup, x + w, y, 'topRight');
    addAnchor(rapResizeGroup, x + w, y + h, 'bottomRight');
    addAnchor(rapResizeGroup, x, y + h, 'bottomLeft');
    layerRap.getChildren()[0].points([ //–ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å –ª–∏–Ω–∏—é –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤
        x, y,
        x + w, y,
        x + w, y + h,
        x, y + h,
        // x, y, // –ø–æ—Å–ª–µ–¥–Ω—è—è —Ç–æ—á–∫–∞ –∫–∞–∫ –ø–µ—Ä–≤–∞—è, –µ—Å–ª–∏ –ª–∏–Ω–∏—è –Ω–µ –∑–∞–∫—Ä—ã—Ç–∞.
    ]);

    layerRap.clearCache()
        .add(rapResizeGroup)
        .draw();
} // rapResize();
function rapResizeApply(params) {
    TE.selected.tools = TE.selected.oldTool; //–≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
    TE.scheme.rap = newRap; //–ó–∞–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ —Ä–∞–ø–ø–æ—Ä—Ç–∞
    schemeRap(); //—Ä–∏—Å—É–µ–º —Ä–∞–ø–ø–æ—Ä—Ç
    // $("body").removeClass("rap");
    // layerRap.get('.rr').destroy(); //—É–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–ø–ø–æ—Ä—Ç–∞
    // var circleRap = layerRap.get('.cr')
    // circleRap.show();
    // if (newRap) circleRap.x(newRap.x + newRap.w).y(newRap.y) //–∫–Ω–æ–ø–∫–∞ –Ω–∞ —Ä–∞–ø–ø–æ—Ä—Ç–µ
    // layerRap.draw();
}


// schemeRap();
// stageEditor.add(layerRap);





//—Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ö–µ–º—ã
function schemeNew() {
    layerTiles.clearCache();
    TE.scheme = {
        num: 3,
        numX: 1,
    }; //–æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ö–µ–º—ã
    // boxSize = 50;
    // console.warn(BD1);
    var h = $("#TEh").val(); //–∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∏–Ω–ø—É—Ç–∞
    var w = $("#TEw").val();
    holstH = +h;
    holstW = +w;
    fitScreen();
    //#TODO —Å–¥–µ–ª–∞—Ç—å —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
    gridTiles(); //–æ—Ç—Ä–∏—Å–æ–≤–∞—Ç—å —Ç–∞–π–ª—ã
    schemeNumbering(); //–æ—Ç—Ä–∏—Å–æ–≤–∞—Ç—å –ª–∏–Ω–µ–π–∫–∏
    schemeRap();
    selectSample();
    // rapResize();
    // console.warn(BD1);

    // layerTiles.batchDraw();
    // layerNum.batchDraw();
    // layerRap.batchDraw();


    stageEditor.draw();
}

stageEditor.add(layerTiles, layerNum, layerRap);